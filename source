# Welcome!
Let's learn how we can use 
[Pierce County's awesome Python GDAL/OGR Cookbook](http://pcjericks.github.io/py-gdalogr-cookbook/). 
But first, you'll need to install a bunch of junk on your computer if it's not already there.

## Tooling, Installs, Data
Some tools we'll use today to explore the cookbook include:

0. **Shell**  # Windows users have CMD, PowerShell or GitBash ( see below ). Terminal for Mac
1. **Python**
2. **GDAL/OGR Library and Python Bindings**
3. **QGIS** or [Mapfart.com](http://mapfart.com) # to visualize the input/outputs
4. **Shapefiles**  # i got mine from [King County GIS Portal](http://www5.kingcounty.gov/gisdataportal/Default.aspx)
5. **PostGIS**  # if you care about database support

We will **not** be walking people through installs. Installs depend on the 
operating system you are running among other factors. So here's a list of places 
to get started depending on your operating system:

----

#### Windows
There's no particular reason to use 
[GitBash](http://code.google.com/p/msysgit/downloads/list?q=label:Featured) 
for these examples. Using CMD or PowerShell in Windows is fine. 
Most of the time we will just be running `python <script_name>` commands. 
But sometimes we might be running shell commands that look unfamiliar. 
If you want to explore a Linux-type shell environment 
then [GitBash](http://code.google.com/p/msysgit/downloads/list?q=label:Featured) 
is a good place to start.

Luckily Python, GDAL/OGR ( w/ Python bindings ) and QGIS can all be installed 
in one shot with [OSGeo4W](http://trac.osgeo.org/osgeo4w/wiki).

PostGIS can be installed as a plugin after you install the [Postgresql database
with this sweet GUI installer](http://www.postgresql.org/download/windows/).

----

#### Mac
Specific GDAL install instructions can be found 
[here](http://www.kyngchaos.com/software:frameworks). 
That tutorial references 
[this repository](http://www.kyngchaos.com/software:frameworks) 
where you can find QGIS and PostGIS among a number of other GIS installs for Mac.

----

#### Linux ( Debian and Ubuntu )
If you are into using packages then you probably want to use 
the [UbuntuGIS PPA](https://wiki.ubuntu.com/UbuntuGIS).

If you like to run `config, make, make install` stuff then:

```bash
#
# get subversion, git
#
$ sudo apt-get install subversion git

#
# get gcc components and build tools
#
$ sudo apt-get install build-essential libtool automake binutils

#
# python tools
#
$ sudo apt-get install python-setuptools python-dev python-psycopg2 python-virtualenv


#
#  PROJ4
#
mkdir -p /usr/local/src/proj
cd /usr/local/src/proj
wget http://download.osgeo.org/proj/proj-4.7.0.tar.gz # or the one you want
tar -xzvf proj-4.7.0.tar.gz
cd proj-4.7.0/nad
wget http://download.osgeo.org/proj/proj-datumgrid-1.5.zip
sudo apt-get install zip
unzip proj-datumgrid-1.5.zip
rm proj-datumgrid-1.5.zip
cd ..
./configure
make
sudo make install
sudo ldconfig

# you'll probably need to define some more projections
vim /usr/local/share/proj/epsg
# add the following projections to the end of the file
# google spherical mercator
<900913> +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs  <>
# custom esri projection from http://spatialreference.org/ref/esri/102761/
<9102761> +proj=lcc +lat_1=18.03333333333334 +lat_2=18.43333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=200000 +y_0=200000 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs  <>

#
#  GEOS
#
mkdir -p /usr/local/src/geos
cd /usr/local/src/geos
wget http://download.osgeo.org/geos/geos-3.3.1.tar.bz2 # or the one you want
tar -xjvf geos-3.3.1.tar.bz2
cd geos-3.3.1
./configure
make
sudo make install
sudo ldconfig


#
#  GDAL/OGR
#
mkdir -p /usr/local/src/gdal
cd /usr/local/src/gdal
# Release
wget http://download.osgeo.org/gdal/gdal-1.8.1.tar.gz # or the one you want
tar -xzvf gdal-*.tar.gz
rm gdal-*.tar.gz
cd gdal-*
./configure --with-python --with-threads --with-pg --with-geos=yes
make
sudo make install
sudo ldconfig
```

-----

## Cookbook Handling Techniques
Now that everything is installed, let's see how easy it is to use the 
cookbook examples.

### Python Shell ( Exploratory Hack )
If you are not familiar with Python, then running the Python shell might be new. 
The Python shell is an interactive way to explore the code you write while 
writing it. We can learn
a lot about the OGR bindings by writing our examples line-by-line in the shell:

1. Navigate to the [start of the cookbook](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html)
and choose a simple example such
as the one about 
[creating a geometry object from WKT](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-geometry-from-wkt).

2. Go to your shell and type `python` so it boots into the Python shell ( you should see something similar below ):

    ```python
    Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
    [GCC 4.6.3] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>>
    ```

3. Start copying the example line-by-line and hit return at the end of each line.
You can also copy and paste the whole example, but writing it out might
help you remember it better


4. You can explore each OGR object using help() command:

    ```python
    >>> from osgeo import ogr
    >>> wkt = "POINT (1120351.5712494177 741921.4223245403)"
    >>> point = ogr.CreateGeometryFromWkt(wkt)
    >>> type( point  )
    <class 'osgeo.ogr.Geometry'>
    >>> help( point )

    Help on Geometry in module osgeo.ogr object:

    class Geometry(__builtin__.object)
     |  Proxy of C++ OGRGeometryShadow class
     |  
     |  Methods defined here:
     |  
     |  AddGeometry(self, *args)
     |      AddGeometry(self, Geometry other) -> OGRErr
     |  
     |  AddGeometryDirectly(self, *args)
     |      AddGeometryDirectly(self, Geometry other_disown) -> OGRErr
     |  
     |  AddPoint(self, *args, **kwargs)
     |      AddPoint(self, double x, double y, double z = 0)
     |  
     |  AddPoint_2D(self, *args)
     |      AddPoint_2D(self, double x, double y)
     |  
     |  AssignSpatialReference(self, *args)
     |      AssignSpatialReference(self, SpatialReference reference)
     |    

     ...output truncated...
     ```


5. I see there's an AddPoint method on my geometry object. Let's see what we break:

    ```python
    >>> point.AddPoint( -9999, 99999 )
    >>> point.ExportToWkt()
    'POINT (-9999 99999 0)'
    #
    # Looks like that overrides our initial geometry. That's not good!
    #
    ```

### Python Scripts ( One Offs )
We can also take the examples from the cookbook and run them as Python scripts.
This is assuming you didn't want to pass in any dynamic arguments.

1. Let's copy 
[this count geometries example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#count-geometries-in-a-geometry)
into a python file called `count.py`

2. Then in the shell navigate to the directory where your `count.py` file exists and run:

    ```bash
    $ python count.py
    ```

3. The code will run and should output content to the shell window like this:

    ```bash
    0). POINT (1181866 615654)
    1). POINT (1205917 623979)
    2). POINT (1227192 643405)
    3). POINT (1224880 665143)

    ```

### Python Scripts ( Add Args )
Let's write a script similar to the example above, but now let's add in ability for passing
dynamic args as an example. I took the buffer example [here](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#buffer-a-geometry) 
and modified.

1. Copy the following code into a file called `buffer.py`:


    ```python
    from osgeo import ogr
    import sys

    if __name__ == '__main__':
        
        # make sure user passes buffer value
        if len( sys.argv ) < 2:
            print >> sys.stderr, '[ ERROR ]: you must pass a buffer value'
            sys.exit( 1 )

        bufferDistance = int( sys.argv[1] )
        wkt = "POINT (1198054.34 648493.09)"
        pt = ogr.CreateGeometryFromWkt(wkt)
        poly = pt.Buffer(bufferDistance)
        print "%s buffered by %d is %s" % (pt.ExportToWkt(), bufferDistance, poly.ExportToWkt())

    ```

2. Now when we run it we pass a buffer value. If we don't pass anything, it throws an error:

    ```bash
    $ python test.py
    [ ERROR ]: you must pass a buffer value
    $ python test.py 2
    POINT (1198054.340000000083819 648493.089999999967404) buffered by 2 is POLYGON ((1198056.340000000083819 648493.089999999967404,1198056.337259069550782 648492.985328087466769,1198056.329043790930882 648492.880943073425442,1198056....
    # ... output truncated cause it's long dude

    ```

-----

## OGR, DataSources, Layers -- Oh My! 
The official [Python GDAL/OGR](http://gdal.org/python/) binding documentation goes
into all the necessary technical detail about the functions and properties for each API 
module and class. It's a good place
to roadmap which parts of the API can help you in your workflow. 

Let's look at some of the cookbook code samples regarding some API concepts.

### OGR Namespaced Functions
Since processing geometries is a big part of using these bindings, 
the module `osgeo.ogr` contains a bunch of helper functions for creating
or parsing geometries. We can see
what is offered by looking at the module [docs](http://gdal.org/python/).

Examples:

1. Create Polygon manually using `osgeo.ogr.Geometry`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-a-polygon)
2. Build up a multi-part geometry using `osgeo.ogr.Geometry`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-a-multipoint)
3. Parse WKT into a geometry object using `osgeo.ogr.CreateGeometryFromWkt`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-geometry-from-wkt)
4. Parse GeoJSON into a geometry object using `osgeo.ogr.CraeteGeometryFromJson`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-geometry-from-geojson)

### DataSources
To be able to read/write layers and their features we need to 
have a basic understanding of how to work with `osgeo.ogr.Driver` and `osgeo.ogr.DataSources`.
A quick-and-dirty theoretical explanation about Drivers and DataSources might be
 -- the GDAL/OGR library has to make sure it has the correct tool ( Driver )
 to talk with a certain data format ( DataSource ).

1. Example of checking if my GDAL/OGR supports reading/writing from/to Shapefiles and PostgreSQL. 
Full cookbook [example here](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#is-ogr-driver-available-by-driver-name):

	```python
	from osgeo import ogr

	## Shapefile available?
	driverName = "ESRI Shapefile"
	drv = ogr.GetDriverByName( driverName )
	if drv is None:
		print "%s driver not available.\n" % driverName
	else:
		print  "%s driver IS available.\n" % driverName

	## PostgreSQL available?
	driverName = "PostgreSQL"
	drv = ogr.GetDriverByName( driverName )
	if drv is None:
		print "%s driver not available.\n" % driverName
	else:
		print  "%s driver IS available.\n" % driverName
	```

2. Example of opening a Shapefile datasource for read/write. Full cookbook [example here](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#get-shapefile-feature-count):

	```python
	import os
	from osgeo import ogr
	daShapefile = r"C:\Temp\Voting_Centers_and_Ballot_Sites.shp"
	driver = ogr.GetDriverByName('ESRI Shapefile')
	dataSource = driver.Open(daShapefile, 0) # 0 means read-only. 1 means writeable.

	#
	#  NOTE: this is a manual way to open a shapefile. osgeo.ogr.Open() can also
	#  sniff the file URI to figure out type of driver to use. The above can be 
	#  rewritten
	#
	from osgeo import ogr
	daShapefile = r"C:\Temp\Voting_Centers_and_Ballot_Sites.shp"
	dataSource = ogr.Open(daShapefile, 0) # 0 means read-only. 1 means writeable.
	```

3. Example of opening a PostGIS datasource to run SQL. Full cookbook [example here](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#get-all-postgis-layers-in-a-postgresql-database):

	```python
	from osgeo import ogr
	databaseServer = "<IP of database server OR Name of database server"
	databaseName = "<Name of database>"
	databaseUser = "<User name>"
	databasePW = "<User password>"
	connString = "PG: host=%s dbname=%s user=%s password=%s" %(databaseServer,databaseName,databaseUser,databasePW)
	conn = ogr.Open(connString)
	```

### Layers, Features, Geometry Fields

1. Example of working with layers, features and fields in shapefile. [ cookbook example ](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#create-a-new-layer-from-the-extent-of-an-existing-layer)
2. Example of getting layers, features and fields in postgresql. [ cookbooke example ](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#get-postgis-layer-fields-get-the-user-defined-fields)

### Projections

1. Example of applying a projection to a geometry. [ cookbook example ](http://pcjericks.github.io/py-gdalogr-cookbook/projection.html#project-a-geometry)
2. Example of writing a `.prj` file for an ESRI shapefile. [ cookbook example ](http://pcjericks.github.io/py-gdalogr-cookbook/projection.html#create-an-esri-prj-file)

-----

##  Show Me Something Kinda Cool
Below are a few modified cookbook examples that do something slightly different:

1. Example showing how we can find the most interesting King County parcels. **Interesting** is
defined here to be "multi-part parcels with a part count > 13". If you are using Linux-type
shell it goes further to show how we can visualize some of these features with the
famous [Mapfarts.com](http://mapfarts.com] instead of doing it in QGIS. Derived from [this
cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#get-postgis-layer-feature-count-by-layer-name):

	```python
	from osgeo import ogr
	import sys

	databaseServer = "127.0.0.1"
	databaseName = "ogrdemo"
	databaseUser = "postgres"
	databasePW = "postgres"
	connString = "PG: host=%s dbname=%s user=%s password=%s" %(databaseServer,databaseName,databaseUser,databasePW)

	def GetPGLayerFields( lyr_name ):
		conn = ogr.Open(connString)

		lyr = conn.GetLayer( lyr_name )
		if lyr is None:
			print >> sys.stderr, '[ ERROR ]: layer name = "%s" could not be found in database "%s"' % ( lyr_name, databaseName )
			sys.exit( 1 )

		counter = 0
		interesting_ones = []
		for feat in lyr:
			geom = feat.GetGeometryRef()
			if geom.GetGeometryCount() > 13:
				#
				#  interesting to note here that if we didn't Clone()
				#  the geometry here, then trying to reference
				#  it later will blow up -- guessing because we
				#  lost reference to the feature it was part of
				#  in this loop -- GOTCHA!
				#
				interesting_ones.append( geom.Clone() )

		for i in interesting_ones:
			print i.ExportToWkt()

		conn.Destroy()


	if __name__ == '__main__':

		if len( sys.argv ) < 2:
			print >> sys.stderr, '[ ERROR ]: you must pass at least one argument -- the layer name argument'
			sys.exit( 1 )

		lyr_name = sys.argv[1]
		GetPGLayerFields( lyr_name )
	```

	Now run it and dump the output WKT geometry to a text file:

	```bash
	$ python interestingfarts.py parcel > OUTPUT.txt
	```

	Now read in the WKT geometry line by line and throw it at [Mapfart.com](http://mapfart.com) to break the service. ( NOTE:
	you must setup a mapfart alias in a Linux-like shell for this to work. See setup section [here](http://mapfart.com/) ):

	```bash
	$ while read -r x; do echo $x | mapfart; done < OUTPUT.txt
	http://mapfart.com/fart_wm8Sc9
	http://mapfart.com/fart_A6AvAN
	http://mapfart.com/fart_oNlFbR
	http://mapfart.com/fart_DFO5UI
	http://mapfart.com/fart_fZOqHa
	http://mapfart.com/fart_0Lr7hB
	http://mapfart.com/fart_UNwJei
	http://mapfart.com/fart_0ndNXu
	http://mapfart.com/fart_8WaaGS
	http://mapfart.com/fart_eh_qRc
	http://mapfart.com/fart_Eced2o
	```

	Each of these is a picture of our interesting parcel fart!

2. Example showing how to approximate this `ogr2ogr` command line statement that does a filter and a column select on 
King County parcels shapefile. Derived from
this cookbook example:

	The `ogr2ogr1 statement we are going to duplicate:

	```bash
	# this command says read in "parcel.shp" and write out to "junkmob.shp" 
	# where "minor" column = 'HYDR' value and only output "pin" column
	$ ogr2ogr -f "ESRI Shapefile" junkmob.shp -select pin -where "minor = 'HYDR'" parcel.shp
	```
	
	This doesn't work yet -- fix it and make it work:
	
	```python
	from osgeo import ogr
	import os, sys

	def run_this_crap( field_name_target ):
		# Get the input Layer
		inShapefile = "C:\Users\gcorradini\Desktop\PYTHON_OGR\DATA\parcel_SHP\parcel\parcel.shp"
		inDriver = ogr.GetDriverByName("ESRI Shapefile")
		inDataSource = inDriver.Open(inShapefile, 0)
		inLayer = inDataSource.GetLayer()
		inLayer.SetAttributeFilter("minor = 'HYDR'")

		# Create the output Layer
		outShapefile = "C:\Users\gcorradini\Desktop\PYTHON_OGR\DATA\parcel_SHP\parcel\output_ogrhydra_filter.shp"
		outDriver = ogr.GetDriverByName("ESRI Shapefile")

		# Remove output shapefile if it already exists
		if os.path.exists(outShapefile):
			outDriver.DeleteDataSource(outShapefile)

		# Create the output shapefile
		outDataSource = outDriver.CreateDataSource(outShapefile)
		outLayer = outDataSource.CreateLayer( os.path.splitext( os.path.split( outShapefile )[1] )[0], geom_type=ogr.wkbMultiPolygon)

		# Add input Layer Fields to the output Layer if it is the one we want
		inLayerDefn = inLayer.GetLayerDefn()
		for i in range(0, inLayerDefn.GetFieldCount()):
			fieldDefn = inLayerDefn.GetFieldDefn(i)
			fieldName = fieldDefn.GetName()
			if fieldName == field_name_target:
				outLayer.CreateField(fieldDefn)

		# Get the output Layer's Feature Definition
		outLayerDefn = outLayer.GetLayerDefn()

		# Add features to the ouput Layer
		for i in range(0, inLayer.GetFeatureCount()):
			# Get the input Feature
			inFeature = inLayer.GetFeature(i)
			# Create output Feature
			outFeature = ogr.Feature(outLayerDefn)
			
			# Add field values from input Layer
			for i in range(0, outLayerDefn.GetFieldCount()):
				fieldDefn = outLayerDefn.GetFieldDefn(i)
				fieldName = fieldDefn.GetName()
				if fieldName == field_name_target:
					outFeature.SetField(outLayerDefn.GetFieldDefn(i).GetNameRef(), inFeature.GetField(i))
					
			# Set geometry as centroid
			geom = inFeature.GetGeometryRef()
			centroid = geom.Centroid()
			outFeature.SetGeometry(centroid)
			# Add new feature to output Layer
			outLayer.CreateFeature(outFeature)

		# Close DataSources
		inDataSource.Destroy()
		outDataSource.Destroy()

	if __name__ == '__main__':
		
		if len( sys.argv ) < 2:
			print "[ ERROR ]: you need to pass at least 1 arg -- the field_name to target"
			sys.exit(1)
		
		run_this_crap( sys.argv[1] )
	```


-----

## Tricks, Trapdoors, Gotchas
The official GDAL/OGR wiki has a long-and-must-read list of [great gotchas here](http://trac.osgeo.org/gdal/wiki/PythonGotchas). I've been bitten
by the example below:

1. Example showing that i cannot delete the parent feature of a child geometry
I hold a reference to because it will blow shit up. Lesson --
don't delete the feature unless you know you are done with it:

	```python
	from osgeo import ogr
	shp_path = "C:\Users\gcorradini\Desktop\PYTHON_OGR\DATA\parcel_SHP\parcel\parcel.shp"
	dSource = ogr.Open( shp_path )
	if dSource is None:
		print "[ ERROR ]: datasource cannot be opened"

	layer = dSource.GetLayer()
	feat = layer.GetNextFeature()
	geom = feat.GetGeometryRef()
	del feat # we deleted the parent ref of geom variable
	print "[ DELETED ] feature"
	print geom.ExportToWkt()  # this call will confuse the hell out of OGR
	print "[ DONE ]"  # this will never be reached
	```

2. Example where we lose feature ref because we are looping through all features
and only care about geometries:

	```python
	from osgeo import ogr
	shp_path = "C:\Users\gcorradini\Desktop\PYTHON_OGR\DATA\parcel_SHP\parcel\parcel.shp"
	dSource = ogr.Open( shp_path )
	if dSource is None:
		print "[ ERROR ]: datasource cannot be opened"

	layer = dSource.GetLayer()
	geom_collection = []
	for feat in layer:
			geom = feat.GetGeometryRef()
			geom_collection.append( geom )
	for g in geom_collection: print g.ExportToWkt()
	```


-----

## Giving Back: Contributing to the Cookbook

### Clone

### Revise

### Send Pull Request

-----

### Authors and Contributors
Thanks to the developers at Pierce County GIS @jericks, Cort Daniels, Michael Payne. Additional thanks to Greg Corradini.
