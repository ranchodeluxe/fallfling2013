{"name":"A HowTo About A HowTo: The Python GDAL/OGR Cookbook","tagline":"CUGOS 2013 Fall Fling Smackdown","body":"# Welcome to the Smackdown!\r\nLet's learn how we can use \r\n[Pierce County's awesome Python GDAL/OGR Cookbook](http://pcjericks.github.io/py-gdalogr-cookbook/). \r\nBut first, let's install a bunch of junk on your computer if it's not already there.\r\n\r\n## Tooling, Installs, Data\r\nSome tools we'll use today to explore the cookbook include:\r\n\r\n0. **Shell**  # Windows users have CMD, PowerShell or GitBash ( see below ). Terminal for Mac\r\n1. **Python**\r\n2. **GDAL/OGR Library and Python Bindings**\r\n3. [Mapfart.com](http://mapfart.com) or **QGIS**  # to visualize the input/outputs\r\n4. **Shapefiles**  # i got mine from [King County GIS Portal](http://www5.kingcounty.gov/gisdataportal/Default.aspx)\r\n5. **PostGIS**  # if you care about database support\r\n\r\nWe will **not** be walking people through installs. Installs depend on the \r\noperating system you are running among other factors. So here's a list of places \r\nto get started depending on your operating system:\r\n\r\n----\r\n\r\n#### Windows\r\nThere's no particular reason to use \r\n[GitBash](http://code.google.com/p/msysgit/downloads/list?q=label:Featured) \r\nfor these examples. Using CMD or PowerShell in Windows is fine. \r\nMost of the time we will just be running `python <script_name>` commands. \r\nBut sometimes we might be running shell commands that look unfamiliar. \r\nIf you want to explore a Linux-type shell environment \r\nthen [GitBash](http://code.google.com/p/msysgit/downloads/list?q=label:Featured) \r\nis a good place to start.\r\n\r\nLuckily Python, GDAL/OGR ( w/ Python bindings ) and QGIS can all be installed \r\nin one shot with [OSGeo4W](http://trac.osgeo.org/osgeo4w/wiki).\r\n\r\nPostGIS can be installed as a plugin after you install the [Postgresql database\r\nwith this sweet GUI installer](http://www.postgresql.org/download/windows/).\r\n\r\n----\r\n\r\n#### Mac\r\nSpecific GDAL install instructions can be found \r\n[here](http://www.kyngchaos.com/software:frameworks). \r\nThat tutorial references \r\n[this repository](http://www.kyngchaos.com/software:frameworks) \r\nwhere you can find QGIS and PostGIS among a number of other GIS installs for Mac.\r\n\r\n----\r\n\r\n#### Linux ( Debian and Ubuntu )\r\nIf you are into using packages then you probably want to use \r\nthe [UbuntuGIS PPA](https://wiki.ubuntu.com/UbuntuGIS).\r\n\r\nIf you like to run `config, make, make install` stuff then:\r\n\r\n```bash\r\n#\r\n# get subversion, git\r\n#\r\n$ sudo apt-get install subversion git\r\n\r\n#\r\n# get gcc components and build tools\r\n#\r\n$ sudo apt-get install build-essential libtool automake binutils\r\n\r\n#\r\n# python tools\r\n#\r\n$ sudo apt-get install python-setuptools python-dev python-psycopg2 python-virtualenv\r\n\r\n\r\n#\r\n#  PROJ4\r\n#\r\nmkdir -p /usr/local/src/proj\r\ncd /usr/local/src/proj\r\nwget http://download.osgeo.org/proj/proj-4.7.0.tar.gz # or the one you want\r\ntar -xzvf proj-4.7.0.tar.gz\r\ncd proj-4.7.0/nad\r\nwget http://download.osgeo.org/proj/proj-datumgrid-1.5.zip\r\nsudo apt-get install zip\r\nunzip proj-datumgrid-1.5.zip\r\nrm proj-datumgrid-1.5.zip\r\ncd ..\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n\r\n# you'll probably need to define some more projections\r\nvim /usr/local/share/proj/epsg\r\n# add the following projections to the end of the file\r\n# google spherical mercator\r\n<900913> +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs  <>\r\n# custom esri projection from http://spatialreference.org/ref/esri/102761/\r\n<9102761> +proj=lcc +lat_1=18.03333333333334 +lat_2=18.43333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=200000 +y_0=200000 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs  <>\r\n\r\n#\r\n#  GEOS\r\n#\r\nmkdir -p /usr/local/src/geos\r\ncd /usr/local/src/geos\r\nwget http://download.osgeo.org/geos/geos-3.3.1.tar.bz2 # or the one you want\r\ntar -xjvf geos-3.3.1.tar.bz2\r\ncd geos-3.3.1\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n\r\n\r\n#\r\n#  GDAL/OGR\r\n#\r\nmkdir -p /usr/local/src/gdal\r\ncd /usr/local/src/gdal\r\n# Release\r\nwget http://download.osgeo.org/gdal/gdal-1.8.1.tar.gz # or the one you want\r\ntar -xzvf gdal-*.tar.gz\r\nrm gdal-*.tar.gz\r\ncd gdal-*\r\n./configure --with-python --with-threads --with-pg --with-geos=yes\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n```\r\n\r\n-----\r\n\r\n## Cookbook Handling Techniques\r\nNow that everything is installed, let's see how easy it is to use the \r\ncookbook examples.\r\n\r\n### Python Shell ( Exploratory Hack )\r\nIf you are not familiar with Python, then running the Python shell might be new. \r\nThe Python shell is an interactive way to explore the code you write while \r\nwriting it. We can learn\r\na lot about the OGR bindings by writing our examples line-by-line in the shell:\r\n\r\n1. Navigate to the [start of the cookbook](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html)\r\nand choose a simple example such\r\nas the one about \r\n[creating a geometry object from WKT](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-geometry-from-wkt).\r\n\r\n2. Go to your shell and type `python` so it boots into the Python shell ( you should see something like similar to below ):\r\n\r\n    ```python\r\n    Python 2.7.3 (default, Aug  1 2012, 05:14:39) \r\n    [GCC 4.6.3] on linux2\r\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n    >>>\r\n    ```\r\n\r\n3. Start copying the example line-by-line and hit return at the end of each line.\r\nYou can also copy and paste the whole example, but writing it out might\r\nhelp you remember it better\r\n\r\n\r\n4. You can explore each OGR object using help() command:\r\n\r\n    ```python\r\n    >>> from osgeo import ogr\r\n    >>> wkt = \"POINT (1120351.5712494177 741921.4223245403)\"\r\n    >>> point = ogr.CreateGeometryFromWkt(wkt)\r\n    >>> type( point  )\r\n    <class 'osgeo.ogr.Geometry'>\r\n    >>> help( point )\r\n\r\n    Help on Geometry in module osgeo.ogr object:\r\n\r\n    class Geometry(__builtin__.object)\r\n     |  Proxy of C++ OGRGeometryShadow class\r\n     |  \r\n     |  Methods defined here:\r\n     |  \r\n     |  AddGeometry(self, *args)\r\n     |      AddGeometry(self, Geometry other) -> OGRErr\r\n     |  \r\n     |  AddGeometryDirectly(self, *args)\r\n     |      AddGeometryDirectly(self, Geometry other_disown) -> OGRErr\r\n     |  \r\n     |  AddPoint(self, *args, **kwargs)\r\n     |      AddPoint(self, double x, double y, double z = 0)\r\n     |  \r\n     |  AddPoint_2D(self, *args)\r\n     |      AddPoint_2D(self, double x, double y)\r\n     |  \r\n     |  AssignSpatialReference(self, *args)\r\n     |      AssignSpatialReference(self, SpatialReference reference)\r\n     |    \r\n\r\n     ...output truncated...\r\n     ```\r\n\r\n\r\n5. I see there's an AddPoint method on my geometry object. Let's see what we break:\r\n\r\n    ```python\r\n    >>> point.AddPoint( -9999, 99999 )\r\n    >>> point.ExportToWkt()\r\n    'POINT (-9999 99999 0)'\r\n    #\r\n    # Looks like that overrides our initial geometry. That's not good!\r\n    #\r\n    ```\r\n\r\n \r\n### Python Scripts ( One Offs )\r\nWe can also take the examples from the cookbook and run them\r\n\r\n### Python Scripts ( Add Args )\r\n\r\n## OGR, DataSources, Layers -- Oh My! \r\nhttp://gdal.org/python/\r\n\r\n### OGR Namespaced Functions\r\n\r\n### DataSources\r\n\r\n### Layers \r\n\r\n### Features, Geometry Fields\r\n\r\n### Projections\r\n\r\n####  Show Me Something Cool\r\n\r\n### Tricks, Trapdoors, Gotchas\r\nhttp://trac.osgeo.org/gdal/wiki/PythonGotchas\r\n\r\n## Giving Back: Contributing to the Cookbook\r\n\r\n### Clone\r\n\r\n### Revise\r\n\r\n### Send Pull Request\r\n\r\n### Authors and Contributors\r\nThanks to the developers at Pierce County GIS @jericks, Cort Daniels, Michael Payne. Thanks to Greg Corradini for putting this together last minute like.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}