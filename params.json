{"name":"A HowTo About A HowTo: The Python GDAL/OGR Cookbook","tagline":"CUGOS 2013 Fall Fling Smackdown","body":"# Welcome to the Smackdown!\r\nLet's learn how we can use \r\n[Pierce County's awesome Python GDAL/OGR Cookbook](http://pcjericks.github.io/py-gdalogr-cookbook/). \r\nBut first, you'll need to install a bunch of junk on your computer if it's not already there.\r\n\r\n## Tooling, Installs, Data\r\nSome tools we'll use today to explore the cookbook include:\r\n\r\n0. **Shell**  # Windows users have CMD, PowerShell or GitBash ( see below ). Terminal for Mac\r\n1. **Python**\r\n2. **GDAL/OGR Library and Python Bindings**\r\n3. **QGIS** or [Mapfart.com](http://mapfart.com) # to visualize the input/outputs\r\n4. **Shapefiles**  # i got mine from [King County GIS Portal](http://www5.kingcounty.gov/gisdataportal/Default.aspx)\r\n5. **PostGIS**  # if you care about database support\r\n\r\nWe will **not** be walking people through installs. Installs depend on the \r\noperating system you are running among other factors. So here's a list of places \r\nto get started depending on your operating system:\r\n\r\n----\r\n\r\n#### Windows\r\nThere's no particular reason to use \r\n[GitBash](http://code.google.com/p/msysgit/downloads/list?q=label:Featured) \r\nfor these examples. Using CMD or PowerShell in Windows is fine. \r\nMost of the time we will just be running `python <script_name>` commands. \r\nBut sometimes we might be running shell commands that look unfamiliar. \r\nIf you want to explore a Linux-type shell environment \r\nthen [GitBash](http://code.google.com/p/msysgit/downloads/list?q=label:Featured) \r\nis a good place to start.\r\n\r\nLuckily Python, GDAL/OGR ( w/ Python bindings ) and QGIS can all be installed \r\nin one shot with [OSGeo4W](http://trac.osgeo.org/osgeo4w/wiki).\r\n\r\nPostGIS can be installed as a plugin after you install the [Postgresql database\r\nwith this sweet GUI installer](http://www.postgresql.org/download/windows/).\r\n\r\n----\r\n\r\n#### Mac\r\nSpecific GDAL install instructions can be found \r\n[here](http://www.kyngchaos.com/software:frameworks). \r\nThat tutorial references \r\n[this repository](http://www.kyngchaos.com/software:frameworks) \r\nwhere you can find QGIS and PostGIS among a number of other GIS installs for Mac.\r\n\r\n----\r\n\r\n#### Linux ( Debian and Ubuntu )\r\nIf you are into using packages then you probably want to use \r\nthe [UbuntuGIS PPA](https://wiki.ubuntu.com/UbuntuGIS).\r\n\r\nIf you like to run `config, make, make install` stuff then:\r\n\r\n```bash\r\n#\r\n# get subversion, git\r\n#\r\n$ sudo apt-get install subversion git\r\n\r\n#\r\n# get gcc components and build tools\r\n#\r\n$ sudo apt-get install build-essential libtool automake binutils\r\n\r\n#\r\n# python tools\r\n#\r\n$ sudo apt-get install python-setuptools python-dev python-psycopg2 python-virtualenv\r\n\r\n\r\n#\r\n#  PROJ4\r\n#\r\nmkdir -p /usr/local/src/proj\r\ncd /usr/local/src/proj\r\nwget http://download.osgeo.org/proj/proj-4.7.0.tar.gz # or the one you want\r\ntar -xzvf proj-4.7.0.tar.gz\r\ncd proj-4.7.0/nad\r\nwget http://download.osgeo.org/proj/proj-datumgrid-1.5.zip\r\nsudo apt-get install zip\r\nunzip proj-datumgrid-1.5.zip\r\nrm proj-datumgrid-1.5.zip\r\ncd ..\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n\r\n# you'll probably need to define some more projections\r\nvim /usr/local/share/proj/epsg\r\n# add the following projections to the end of the file\r\n# google spherical mercator\r\n<900913> +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs  <>\r\n# custom esri projection from http://spatialreference.org/ref/esri/102761/\r\n<9102761> +proj=lcc +lat_1=18.03333333333334 +lat_2=18.43333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=200000 +y_0=200000 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs  <>\r\n\r\n#\r\n#  GEOS\r\n#\r\nmkdir -p /usr/local/src/geos\r\ncd /usr/local/src/geos\r\nwget http://download.osgeo.org/geos/geos-3.3.1.tar.bz2 # or the one you want\r\ntar -xjvf geos-3.3.1.tar.bz2\r\ncd geos-3.3.1\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n\r\n\r\n#\r\n#  GDAL/OGR\r\n#\r\nmkdir -p /usr/local/src/gdal\r\ncd /usr/local/src/gdal\r\n# Release\r\nwget http://download.osgeo.org/gdal/gdal-1.8.1.tar.gz # or the one you want\r\ntar -xzvf gdal-*.tar.gz\r\nrm gdal-*.tar.gz\r\ncd gdal-*\r\n./configure --with-python --with-threads --with-pg --with-geos=yes\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n```\r\n\r\n-----\r\n\r\n## Cookbook Handling Techniques\r\nNow that everything is installed, let's see how easy it is to use the \r\ncookbook examples.\r\n\r\n### Python Shell ( Exploratory Hack )\r\nIf you are not familiar with Python, then running the Python shell might be new. \r\nThe Python shell is an interactive way to explore the code you write while \r\nwriting it. We can learn\r\na lot about the OGR bindings by writing our examples line-by-line in the shell:\r\n\r\n1. Navigate to the [start of the cookbook](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html)\r\nand choose a simple example such\r\nas the one about \r\n[creating a geometry object from WKT](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-geometry-from-wkt).\r\n\r\n2. Go to your shell and type `python` so it boots into the Python shell ( you should see something similar below ):\r\n\r\n    ```python\r\n    Python 2.7.3 (default, Aug  1 2012, 05:14:39) \r\n    [GCC 4.6.3] on linux2\r\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n    >>>\r\n    ```\r\n\r\n3. Start copying the example line-by-line and hit return at the end of each line.\r\nYou can also copy and paste the whole example, but writing it out might\r\nhelp you remember it better\r\n\r\n\r\n4. You can explore each OGR object using help() command:\r\n\r\n    ```python\r\n    >>> from osgeo import ogr\r\n    >>> wkt = \"POINT (1120351.5712494177 741921.4223245403)\"\r\n    >>> point = ogr.CreateGeometryFromWkt(wkt)\r\n    >>> type( point  )\r\n    <class 'osgeo.ogr.Geometry'>\r\n    >>> help( point )\r\n\r\n    Help on Geometry in module osgeo.ogr object:\r\n\r\n    class Geometry(__builtin__.object)\r\n     |  Proxy of C++ OGRGeometryShadow class\r\n     |  \r\n     |  Methods defined here:\r\n     |  \r\n     |  AddGeometry(self, *args)\r\n     |      AddGeometry(self, Geometry other) -> OGRErr\r\n     |  \r\n     |  AddGeometryDirectly(self, *args)\r\n     |      AddGeometryDirectly(self, Geometry other_disown) -> OGRErr\r\n     |  \r\n     |  AddPoint(self, *args, **kwargs)\r\n     |      AddPoint(self, double x, double y, double z = 0)\r\n     |  \r\n     |  AddPoint_2D(self, *args)\r\n     |      AddPoint_2D(self, double x, double y)\r\n     |  \r\n     |  AssignSpatialReference(self, *args)\r\n     |      AssignSpatialReference(self, SpatialReference reference)\r\n     |    \r\n\r\n     ...output truncated...\r\n     ```\r\n\r\n\r\n5. I see there's an AddPoint method on my geometry object. Let's see what we break:\r\n\r\n    ```python\r\n    >>> point.AddPoint( -9999, 99999 )\r\n    >>> point.ExportToWkt()\r\n    'POINT (-9999 99999 0)'\r\n    #\r\n    # Looks like that overrides our initial geometry. That's not good!\r\n    #\r\n    ```\r\n\r\n### Python Scripts ( One Offs )\r\nWe can also take the examples from the cookbook and run them as Python scripts.\r\nThis is assuming you didn't want to pass in any dynamic arguments.\r\n\r\n1. Let's copy \r\n[this count geometries example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#count-geometries-in-a-geometry)\r\ninto a python file called `count.py`\r\n\r\n2. Then in the shell navigate to the directory where your `count.py` file exists and run:\r\n\r\n    ```bash\r\n    $ python count.py\r\n    ```\r\n\r\n3. The code will run and should output content to the shell window like this:\r\n\r\n    ```bash\r\n    0). POINT (1181866 615654)\r\n    1). POINT (1205917 623979)\r\n    2). POINT (1227192 643405)\r\n    3). POINT (1224880 665143)\r\n\r\n    ```\r\n\r\n### Python Scripts ( Add Args )\r\nLet's write a script similar to the example above, but now let's add in ability for passing\r\ndynamic args as an example. I took the buffer example [here](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#buffer-a-geometry) \r\nand modified.\r\n\r\n1. Copy the following code into a file called `buffer.py`:\r\n\r\n\r\n    ```python\r\n    from osgeo import ogr\r\n    import sys\r\n\r\n    if __name__ == '__main__':\r\n        \r\n        # make sure user passes buffer value\r\n        if len( sys.argv ) < 2:\r\n            print >> sys.stderr, '[ ERROR ]: you must pass a buffer value'\r\n            sys.exit( 1 )\r\n\r\n        bufferDistance = int( sys.argv[1] )\r\n        wkt = \"POINT (1198054.34 648493.09)\"\r\n        pt = ogr.CreateGeometryFromWkt(wkt)\r\n        poly = pt.Buffer(bufferDistance)\r\n        print \"%s buffered by %d is %s\" % (pt.ExportToWkt(), bufferDistance, poly.ExportToWkt())\r\n\r\n    ```\r\n\r\n2. Now when we run it we pass a buffer value. If we don't pass anything, it throws an error:\r\n\r\n    ```bash\r\n    $ python test.py\r\n    [ ERROR ]: you must pass a buffer value\r\n    $ python test.py 2\r\n    POINT (1198054.340000000083819 648493.089999999967404) buffered by 2 is POLYGON ((1198056.340000000083819 648493.089999999967404,1198056.337259069550782 648492.985328087466769,1198056.329043790930882 648492.880943073425442,1198056....\r\n    # ... output truncated cause it's long dude\r\n\r\n    ```\r\n\r\n-----\r\n\r\n## OGR, DataSources, Layers -- Oh My! \r\nThe official [Python GDAL/OGR](http://gdal.org/python/) binding documentation goes\r\ninto all the necessary technical detail about the functions and properties for each API \r\nmodule and class. It's a good place\r\nto roadmap which parts of the API can help you in your workflow. \r\n\r\nLet's look at some of the cookbook code samples regarding some API concepts.\r\n\r\n### OGR Namespaced Functions\r\nSince processing geometries is a big part of using these bindings, \r\nthe module `osgeo.ogr` contains a bunch of helper functions for creating\r\nor parsing geometries. We can see\r\nwhat is offered by looking at the module [docs](http://gdal.org/python/).\r\n\r\nExamples:\r\n\r\n1. Create Polygon manually using `osgeo.ogr.Geometry`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-a-polygon)\r\n2. Build up a multi-part geometry using `osgeo.ogr.Geometry`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-a-multipoint)\r\n3. Parse WKT into a geometry object using `osgeo.ogr.CreateGeometryFromWkt`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-geometry-from-wkt)\r\n4. Parse GeoJSON into a geometry object using `osgeo.ogr.CraeteGeometryFromJson`: [cookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/geometry.html#create-geometry-from-geojson)\r\n\r\n### DataSources\r\nTo be able to read/write layers and their features we need to \r\nhave a basic understanding of how to work with `osgeo.ogr.Driver` and `osgeo.ogr.DataSources`.\r\nA quick-and-dirty theoretical explanation about Drivers and DataSources might be\r\n -- the GDAL/OGR library has to make sure it has the correct tool ( Driver )\r\n to talk with a certain data format ( DataSource ).\r\n\r\n1. Example of checking if my GDAL/OGR supports reading/writing from/to Shapefiles and PostgreSQL. \r\nFull cookbook [example here](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#is-ogr-driver-available-by-driver-name):\r\n\r\n\t```python\r\n\tfrom osgeo import ogr\r\n\r\n\t## Shapefile available?\r\n\tdriverName = \"ESRI Shapefile\"\r\n\tdrv = ogr.GetDriverByName( driverName )\r\n\tif drv is None:\r\n\t\tprint \"%s driver not available.\\n\" % driverName\r\n\telse:\r\n\t\tprint  \"%s driver IS available.\\n\" % driverName\r\n\r\n\t## PostgreSQL available?\r\n\tdriverName = \"PostgreSQL\"\r\n\tdrv = ogr.GetDriverByName( driverName )\r\n\tif drv is None:\r\n\t\tprint \"%s driver not available.\\n\" % driverName\r\n\telse:\r\n\t\tprint  \"%s driver IS available.\\n\" % driverName\r\n\t```\r\n\r\n2. Example of opening a Shapefile datasource for read/write. Full cookbook [example here](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#get-shapefile-feature-count):\r\n\r\n\t```python\r\n\timport os\r\n\tfrom osgeo import ogr\r\n\tdaShapefile = r\"C:\\Temp\\Voting_Centers_and_Ballot_Sites.shp\"\r\n\tdriver = ogr.GetDriverByName('ESRI Shapefile')\r\n\tdataSource = driver.Open(daShapefile, 0) # 0 means read-only. 1 means writeable.\r\n\r\n\t#\r\n\t#  NOTE: this is a manual way to open a shapefile. osgeo.ogr.Open() can also\r\n\t#  sniff the file URI to figure out type of driver to use. The above can be \r\n\t#  rewritten\r\n\t#\r\n\tfrom osgeo import ogr\r\n\tdaShapefile = r\"C:\\Temp\\Voting_Centers_and_Ballot_Sites.shp\"\r\n\tdataSource = ogr.Open(daShapefile, 0) # 0 means read-only. 1 means writeable.\r\n\t```\r\n\r\n3. Example of opening a PostGIS datasource to run SQL. Full cookbook [example here](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#get-all-postgis-layers-in-a-postgresql-database):\r\n\r\n\t```python\r\n\tfrom osgeo import ogr\r\n\tdatabaseServer = \"<IP of database server OR Name of database server\"\r\n\tdatabaseName = \"<Name of database>\"\r\n\tdatabaseUser = \"<User name>\"\r\n\tdatabasePW = \"<User password>\"\r\n\tconnString = \"PG: host=%s dbname=%s user=%s password=%s\" %(databaseServer,databaseName,databaseUser,databasePW)\r\n\tconn = ogr.Open(connString)\r\n\t```\r\n\r\n### Layers, Features, Geometry Fields\r\n\r\n### Projections\r\n\r\n\r\n-----\r\n\r\n##  Show Me Something Sorta Cool\r\nBelow are a few modified cookbook examples that do something slightly different:\r\n\r\n1. Example showing how we can find the most interesting King County parcels. **Interesting** is\r\ndefined here to be \"multi-part parcels with a part count > 13\". If you are using Linux-type\r\nshell it goes further to show how we can visualize some of these features with the\r\nfamous [Mapfarts.com](http://mapfarts.com] instead of doing it in QGIS. Derived from [this\r\ncookbook example](http://pcjericks.github.io/py-gdalogr-cookbook/layers.html#get-postgis-layer-feature-count-by-layer-name):\r\n\r\n\t```python\r\n\tfrom osgeo import ogr\r\n\timport sys\r\n\r\n\tdatabaseServer = \"127.0.0.1\"\r\n\tdatabaseName = \"ogrdemo\"\r\n\tdatabaseUser = \"postgres\"\r\n\tdatabasePW = \"postgres\"\r\n\tconnString = \"PG: host=%s dbname=%s user=%s password=%s\" %(databaseServer,databaseName,databaseUser,databasePW)\r\n\r\n\tdef GetPGLayerFields( lyr_name ):\r\n\t\tconn = ogr.Open(connString)\r\n\r\n\t\tlyr = conn.GetLayer( lyr_name )\r\n\t\tif lyr is None:\r\n\t\t\tprint >> sys.stderr, '[ ERROR ]: layer name = \"%s\" could not be found in database \"%s\"' % ( lyr_name, databaseName )\r\n\t\t\tsys.exit( 1 )\r\n\r\n\t\tcounter = 0\r\n\t\tinteresting_ones = []\r\n\t\tfor feat in lyr:\r\n\t\t\tgeom = feat.GetGeometryRef()\r\n\t\t\tif geom.GetGeometryCount() > 13:\r\n\t\t\t\t#\r\n\t\t\t\t#  interesting to note here that if we didn't Clone()\r\n\t\t\t\t#  the geometry here, then trying to reference\r\n\t\t\t\t#  it later will blow up -- guessing because we\r\n\t\t\t\t#  lost reference to the feature it was part of\r\n\t\t\t\t#  in this loop -- GOTCHA!\r\n\t\t\t\t#\r\n\t\t\t\tinteresting_ones.append( geom.Clone() )\r\n\r\n\t\tfor i in interesting_ones:\r\n\t\t\tprint i.ExportToWkt()\r\n\r\n\t\tconn.Destroy()\r\n\r\n\r\n\tif __name__ == '__main__':\r\n\r\n\t\tif len( sys.argv ) < 2:\r\n\t\t\tprint >> sys.stderr, '[ ERROR ]: you must pass at least one argument -- the layer name argument'\r\n\t\t\tsys.exit( 1 )\r\n\r\n\t\tlyr_name = sys.argv[1]\r\n\t\tGetPGLayerFields( lyr_name )\r\n\t```\r\n\r\n\tNow run it and dump the output WKT geometry to a text file:\r\n\r\n\t```bash\r\n\t$ python interestingfarts.py parcel > OUTPUT.txt\r\n\t```\r\n\r\n\tNow read in the WKT geometry line by line and throw it at [Mapfart.com](http://mapfart.com) to break the service. ( NOTE:\r\n\tyou must setup a mapfart alias in a Linux-like shell for this to work. See setup section [here](http://mapfart.com/) ):\r\n\r\n\t```bash\r\n\t$ while read -r x; do echo $x | mapfart; done < OUTPUT.txt\r\n\thttp://mapfart.com/fart_wm8Sc9\r\n\thttp://mapfart.com/fart_A6AvAN\r\n\thttp://mapfart.com/fart_oNlFbR\r\n\thttp://mapfart.com/fart_DFO5UI\r\n\thttp://mapfart.com/fart_fZOqHa\r\n\thttp://mapfart.com/fart_0Lr7hB\r\n\thttp://mapfart.com/fart_UNwJei\r\n\thttp://mapfart.com/fart_0ndNXu\r\n\thttp://mapfart.com/fart_8WaaGS\r\n\thttp://mapfart.com/fart_eh_qRc\r\n\thttp://mapfart.com/fart_Eced2o\r\n\t```\r\n\r\n\tEach of these is a picture of our interesting parcel fart!\r\n\r\n2. Example showing how to approximate this `ogr2ogr` command line statement that does a filter and a column select on \r\nKing County parcels shapefile. Derived from\r\nthis cookbook example:\r\n\r\n\tThe `ogr2ogr1 statement we are going to duplicate:\r\n\r\n\t```bash\r\n\t# this command says read in \"parcel.shp\" and write out to \"junkmob.shp\" \r\n\t# where \"minor\" column = 'HYDR' value and only output \"pin\" column\r\n\t$ ogr2ogr -f \"ESRI Shapefile\" junkmob.shp -select pin -where \"minor = 'HYDR'\" parcel.shp\r\n\t```\r\n\r\n\r\n-----\r\n\r\n## Tricks, Trapdoors, Gotchas\r\nThe official GDAL/OGR wiki has a long-and-must-read list of [great gotchas here](http://trac.osgeo.org/gdal/wiki/PythonGotchas). I've been bitten\r\nby the example below:\r\n\r\nExample showing that i cannot delete the parent feature of a child geometry\r\nI hold a reference to because it will blow shit up. Lesson --\r\ndon't delete the feature unless you know you are done with it.\r\n```python\r\nfrom osgeo import ogr\r\nshp_path = \"C:\\Users\\gcorradini\\Desktop\\PYTHON_OGR\\DATA\\parcel_SHP\\parcel\\parcel.shp\"\r\ndSource = ogr.Open( shp_path )\r\nif dSource is None:\r\n    print \"[ ERROR ]: datasource cannot be opened\"\r\n\r\nlayer = dSource.GetLayer()\r\nfeat = layer.GetNextFeature()\r\ngeom = feat.GetGeometryRef()\r\ndel feat # we deleted the parent ref of geom variable\r\nprint \"[ DELETED ] feature\"\r\nprint geom.ExportToWkt()  # this call will confuse the hell out of OGR\r\nprint \"[ DONE ]\"  # this will never be reached\r\n```\r\n\r\nExample where we lose feature ref because we are looping through all features\r\nand only care about geometries:\r\n\r\n\r\n-----\r\n\r\n## Giving Back: Contributing to the Cookbook\r\n\r\n### Clone\r\n\r\n### Revise\r\n\r\n### Send Pull Request\r\n\r\n-----\r\n\r\n### Authors and Contributors\r\nThanks to the developers at Pierce County GIS @jericks, Cort Daniels, Michael Payne. Additional thanks to Greg Corradini.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}